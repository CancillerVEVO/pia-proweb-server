generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_SERVER")
}

model Comentario {
  id                  Int                   @id @default(autoincrement())
  usuario_id          Int
  critica_id          Int
  comentario_padre    Int
  contenido           String                @db.VarChar(255)
  fecha_creado        DateTime              @default(now()) @db.Timestamptz(6)
  fecha_actualizado   DateTime?             @db.Timestamptz(6)
  Comentario          Comentario            @relation("ComentarioToComentario", fields: [comentario_padre], references: [id], onDelete: NoAction, onUpdate: NoAction)
  other_Comentario    Comentario[]          @relation("ComentarioToComentario")
  Critica             Critica               @relation(fields: [critica_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Usuario             Usuario               @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Reaccion_Comentario Reaccion_Comentario[]
}

model Favorito {
  usuario_id   Int
  critica_id   Int
  fecha_creado DateTime @default(now()) @db.Timestamptz(6)
  Critica      Critica  @relation(fields: [critica_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Usuario      Usuario  @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([usuario_id, critica_id])
}

model Reaccion_Comentario {
  usuario_id        Int
  comentario_id     Int
  tipo_reaccion_id  Int
  fecha_creado      DateTime      @default(now()) @db.Timestamptz(6)
  fecha_actualizado DateTime?     @db.Timestamptz(6)
  Comentario        Comentario    @relation(fields: [comentario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Tipo_Reaccion     Tipo_Reaccion @relation(fields: [tipo_reaccion_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Usuario           Usuario       @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([usuario_id, comentario_id])
}

model Rol {
  id          Int       @id @default(autoincrement())
  nombre      String    @db.VarChar(50)
  descripcion String    @db.VarChar(255)
  Usuario     Usuario[]
}

model Tipo_Reaccion {
  id                  Int                   @id @default(autoincrement())
  nombre              String                @db.VarChar(50)
  descripcion         String                @db.VarChar(255)
  Reaccion_Comentario Reaccion_Comentario[]
}

model Usuario {
  id                  Int                   @id @default(autoincrement())
  nombre              String                @unique @db.VarChar(50)
  email               String                @unique @db.VarChar(255)
  password            String                @db.VarChar(255)
  rol_id              Int                   @default(2)
  biografia           String?               @db.VarChar(255)
  fecha_creado        DateTime              @default(now()) @db.Timestamptz(6)
  fecha_actualizado   DateTime?             @db.Timestamptz(6)
  Comentario          Comentario[]
  Critica             Critica[]
  Favorito            Favorito[]
  Reaccion_Comentario Reaccion_Comentario[]
  Rol                 Rol                   @relation(fields: [rol_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Critica {
  id                Int          @id @default(autoincrement())
  usuario_id        Int
  pelicula          Int
  titulo_critica    String       @db.VarChar(255)
  contenido         String       @db.VarChar(255)
  calificacion      Int
  fecha_creado      DateTime     @default(now()) @db.Timestamptz(6)
  fecha_actualizado DateTime?    @db.Timestamptz(6)
  Comentario        Comentario[]
  Usuario           Usuario      @relation(fields: [usuario_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Favorito          Favorito[]
}
